@@ -1,10 +1,10 @@
 /* :ts=4
  *  $VER: init.c $Revision$ (10-Nov-2023)
  *
  *  This file is part of euae_blit.
  *
- *  Copyright (c) 2023 Hyperion Entertainment CVBA.
- *  All Rights Reserved.
+ *  Copyright (c) 2021 LiveForIt Software.
+ *  GPL2 License..
  *
  * $Id$
  *
@@ -16,24 +16,33 @@
 
 #include <exec/exec.h>
 #include <proto/exec.h>
+#include <proto/dos.h>
 #include <dos/dos.h>
 #include <exec/types.h>
-#include <exec/interrupts.h>
-#include <exec/libraries.h>
-#include <proto/euae_blit.h>
+#include <libraries/libblitter.h>
+#include <hardware/custom.h>
+#include <proto/libblitter.h>
 #include <stdarg.h>
 
 /* Version Tag */
-#include "euae_blit.library_rev.h"
+#include "libblitter.library_rev.h"
 STATIC CONST UBYTE USED verstag[] = VERSTAG;
 
-struct 
+struct _Library
 {
     struct Library libNode;
     BPTR segList;
     /* If you need more data fields, add them here */
 };
 
+struct ExecIFace *IExec UNUSED = NULL;
+
+struct DOSIFace *IDOS = NULL;
+struct Library *DOSBase = NULL;
+
+struct NewlibIFace * INewlib = NULL;
+struct Library *NewLibBase = NULL;
+
 /*
  * The system (and compiler) rely on a symbol named _start which marks
  * the beginning of execution of an ELF file. To prevent others from 
@@ -57,7 +66,7 @@
 /* Open the library */
 STATIC struct Library *libOpen(struct LibraryManagerInterface *Self, ULONG version)
 {
-    struct  *libBase = (struct  *)Self->Data.LibBase; 
+    struct _Library  *libBase = (struct  _Library *)Self->Data.LibBase; 
 
     if (version > VERSION)
     {
@@ -78,7 +87,7 @@
 /* Close the library */
 STATIC APTR libClose(struct LibraryManagerInterface *Self)
 {
-    struct  *libBase = (struct  *)Self->Data.LibBase;
+    struct _Library  *libBase = (struct  _Library *)Self->Data.LibBase;
     /* Make sure to undo what open did */
 
 
@@ -88,22 +97,35 @@
     return 0;
 }
 
+#define close_lib(b,i)			\
+	if (b) IExec->CloseLibrary(b);	\
+	if (i) IExec->DropInterface( (struct Interface *) i );	\
+	b = NULL; i = NULL;			
+
+
+void close_libs()
+{
+	struct ExecIFace *IExec = (struct ExecIFace *)(*(struct ExecBase **)4)->MainInterface;
+	close_lib( DOSBase, IDOS);
+	close_lib( NewLibBase, INewlib);
+}
 
 /* Expunge the library */
 STATIC APTR libExpunge(struct LibraryManagerInterface *Self)
 {
     /* If your library cannot be expunged, return 0 */
-    struct ExecIFace *IExec
-        = (struct ExecIFace *)(*(struct ExecBase **)4)->MainInterface;
+    IExec = (struct ExecIFace *)(*(struct ExecBase **)4)->MainInterface;
     APTR result = (APTR)0;
-    struct  *libBase = (struct  *)Self->Data.LibBase;
+    struct _Library  *libBase = (struct  _Library *)Self->Data.LibBase;
     if (libBase->libNode.lib_OpenCnt == 0)
     {
        result = (APTR)libBase->segList;
         /* Undo what the init code did */
 
-        IExec->Remove((struct Node *)libBase);
-        IExec->DeleteLibrary((struct Library *)libBase);
+	close_libs();
+
+	IExec->Remove((struct Node *)libBase);
+	IExec->DeleteLibrary((struct Library *)libBase);
     }
     else
     {
@@ -113,32 +135,57 @@
     return result;
 }
 
+BOOL open_lib( const char *name, int ver , const char *iname, int iver, struct Library **base, struct Interface **interface)
+{
+
+	*interface = NULL;
+	*base = IExec->OpenLibrary( name , ver);
+
+	if (*base)
+	{
+		 *interface = IExec->GetInterface( *base,  iname , iver, TAG_END );
+		if (!*interface) if (IDOS) IDOS -> Printf("Unable to getInterface %s for %s %d!\n",iname,name,ver);
+	}
+	else
+	{
+	   	if (IDOS) IDOS -> Printf("Unable to open the %s %ld!\n",name,ver);
+	}
+
+	return (*interface) ? TRUE : FALSE;
+}
+
+BOOL init()
+{
+	if ( ! open_lib( "dos.library", 53L , "main", 1, &DOSBase, (struct Interface **) &IDOS  ) ) return FALSE;
+	if ( ! open_lib( "newlib.library", 53L , "main", 1, &NewLibBase, (struct Interface **) &INewlib  ) ) return FALSE;
+
+	return TRUE;
+}
+
+
 /* The ROMTAG Init Function */
 STATIC struct Library *libInit(struct Library *LibraryBase, APTR seglist, struct Interface *exec)
 {
-    struct  *libBase = (struct  *)LibraryBase;
-    struct ExecIFace *IExec UNUSED = (struct ExecIFace *)exec;
+	struct _Library  *libBase = (struct  _Library *)LibraryBase;
+	IExec = (struct ExecIFace *)exec;
 
        return (struct Library *)libBase;
 }
@@ -200,10 +247,10 @@
 
 /* ------------------- Library Interface(s) ------------------------ */
 
-#include "euae_blit_vectors.c"
+#include "libblitter_vectors.c"
 
 /* Uncomment this line (and see below) if your library has a 68k jump table */
-/* extern APTR VecTable68K[]; */
+extern APTR VecTable68K[]; 
 
 STATIC CONST struct TagItem main_v1_Tags[] =
 {
@@ -222,11 +269,11 @@
 
 STATIC CONST struct TagItem libCreateTags[] =
 {
-	{ CLT_DataSize,		sizeof(struct )	},
+	{ CLT_DataSize,	sizeof(struct _Library)	},
 	{ CLT_InitFunc,		(Tag)libInit			},
 	{ CLT_Interfaces,	(Tag)libInterfaces		},
 	/* Uncomment the following line if you have a 68k jump table */
-	/* { CLT_Vector68K, (Tag)VecTable68K }, */
+	{ CLT_Vector68K, (Tag)VecTable68K }, 
 	{TAG_DONE,		 0 }
 };
 
